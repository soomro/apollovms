//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using VMSCORE.Util;

namespace VMSCORE.EntityClasses
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(RequestResponse))]
    [KnownType(typeof(Incident))]
    [KnownType(typeof(NeedItem))]
    public partial class Request: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    OnPropertyChanged("Message");
                }
            }
        }
        private string _message;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public string SearchAreaCoordinatesStr
        {
            get { return Util.CollectionUtil.ToString<string>(SearchAreaCoordinates); }
            set
            {
                    SearchAreaCoordinates=Util.CollectionUtil.ToStrArray(value);
                    OnPropertyChanged("SearchAreaCoordinatesStr");
            }
        }
        public ObservableCollection<string> SearchAreaCoordinates=new ObservableCollection<string>();

        [DataMember]
        public int IncidentId
        {
            get { return _incidentId; }
            set
            {
                if (_incidentId != value)
                {
                    ChangeTracker.RecordOriginalValue("IncidentId", _incidentId);
                    if (!IsDeserializing)
                    {
                        if (Incident != null && Incident.Id != value)
                        {
                            Incident = null;
                        }
                    }
                    _incidentId = value;
                    OnPropertyChanged("IncidentId");
                }
            }
        }
        private int _incidentId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<RequestResponse> RequestResponses
        {
            get
            {
                if (_requestResponses == null)
                {
                    _requestResponses = new TrackableCollection<RequestResponse>();
                    _requestResponses.CollectionChanged += FixupRequestResponses;
                }
                return _requestResponses;
            }
            set
            {
                if (!ReferenceEquals(_requestResponses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requestResponses != null)
                    {
                        _requestResponses.CollectionChanged -= FixupRequestResponses;
                    }
                    _requestResponses = value;
                    if (_requestResponses != null)
                    {
                        _requestResponses.CollectionChanged += FixupRequestResponses;
                    }
                    OnNavigationPropertyChanged("RequestResponses");
                }
            }
        }
        private TrackableCollection<RequestResponse> _requestResponses;
    
        [DataMember]
        public Incident Incident
        {
            get { return _incident; }
            set
            {
                if (!ReferenceEquals(_incident, value))
                {
                    var previousValue = _incident;
                    _incident = value;
                    FixupIncident(previousValue);
                    OnNavigationPropertyChanged("Incident");
                }
            }
        }
        private Incident _incident;
    
        [DataMember]
        public TrackableCollection<NeedItem> NeedItems
        {
            get
            {
                if (_needItems == null)
                {
                    _needItems = new TrackableCollection<NeedItem>();
                    _needItems.CollectionChanged += FixupNeedItems;
                }
                return _needItems;
            }
            set
            {
                if (!ReferenceEquals(_needItems, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_needItems != null)
                    {
                        _needItems.CollectionChanged -= FixupNeedItems;
                    }
                    _needItems = value;
                    if (_needItems != null)
                    {
                        _needItems.CollectionChanged += FixupNeedItems;
                    }
                    OnNavigationPropertyChanged("NeedItems");
                }
            }
        }
        private TrackableCollection<NeedItem> _needItems;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            RequestResponses.Clear();
            Incident = null;
            NeedItems.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupIncident(Incident previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Requests.Contains(this))
            {
                previousValue.Requests.Remove(this);
            }
    
            if (Incident != null)
            {
                if (!Incident.Requests.Contains(this))
                {
                    Incident.Requests.Add(this);
                }
    
                IncidentId = Incident.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Incident")
                    && (ChangeTracker.OriginalValues["Incident"] == Incident))
                {
                    ChangeTracker.OriginalValues.Remove("Incident");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Incident", previousValue);
                }
                if (Incident != null && !Incident.ChangeTracker.ChangeTrackingEnabled)
                {
                    Incident.StartTracking();
                }
            }
        }
    
        private void FixupRequestResponses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequestResponse item in e.NewItems)
                {
                    item.Request = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequestResponses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequestResponse item in e.OldItems)
                {
                    if (ReferenceEquals(item.Request, this))
                    {
                        item.Request = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequestResponses", item);
                    }
                }
            }
        }
    
        private void FixupNeedItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NeedItem item in e.NewItems)
                {
                    item.Request = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NeedItems", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NeedItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.Request, this))
                    {
                        item.Request = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NeedItems", item);
                    }
                }
            }
        }

        #endregion
    }
}
