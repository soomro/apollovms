//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace VMSCORE.EntityClasses
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Volunteer))]
    [KnownType(typeof(Manager))]
    public partial class Address: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    OnPropertyChanged("Country");
                }
            }
        }
        private string _country;
    
        [DataMember]
        public string FlatNumber
        {
            get { return _flatNumber; }
            set
            {
                if (_flatNumber != value)
                {
                    _flatNumber = value;
                    OnPropertyChanged("FlatNumber");
                }
            }
        }
        private string _flatNumber;
    
        [DataMember]
        public string HouseNumber
        {
            get { return _houseNumber; }
            set
            {
                if (_houseNumber != value)
                {
                    _houseNumber = value;
                    OnPropertyChanged("HouseNumber");
                }
            }
        }
        private string _houseNumber;
    
        [DataMember]
        public string PostalCode
        {
            get { return _postalCode; }
            set
            {
                if (_postalCode != value)
                {
                    _postalCode = value;
                    OnPropertyChanged("PostalCode");
                }
            }
        }
        private string _postalCode;
    
        [DataMember]
        public string Street
        {
            get { return _street; }
            set
            {
                if (_street != value)
                {
                    _street = value;
                    OnPropertyChanged("Street");
                }
            }
        }
        private string _street;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Volunteer Volunteer
        {
            get { return _volunteer; }
            set
            {
                if (!ReferenceEquals(_volunteer, value))
                {
                    var previousValue = _volunteer;
                    _volunteer = value;
                    FixupVolunteer(previousValue);
                    OnNavigationPropertyChanged("Volunteer");
                }
            }
        }
        private Volunteer _volunteer;
    
        [DataMember]
        public Manager Manager
        {
            get { return _manager; }
            set
            {
                if (!ReferenceEquals(_manager, value))
                {
                    var previousValue = _manager;
                    _manager = value;
                    FixupManager(previousValue);
                    OnNavigationPropertyChanged("Manager");
                }
            }
        }
        private Manager _manager;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Volunteer = null;
            Manager = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupVolunteer(Volunteer previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Address, this))
            {
                previousValue.Address = null;
            }
    
            if (Volunteer != null)
            {
                Volunteer.Address = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Volunteer")
                    && (ChangeTracker.OriginalValues["Volunteer"] == Volunteer))
                {
                    ChangeTracker.OriginalValues.Remove("Volunteer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Volunteer", previousValue);
                }
                if (Volunteer != null && !Volunteer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Volunteer.StartTracking();
                }
            }
        }
    
        private void FixupManager(Manager previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Address, this))
            {
                previousValue.Address = null;
            }
    
            if (Manager != null)
            {
                Manager.Address = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Manager")
                    && (ChangeTracker.OriginalValues["Manager"] == Manager))
                {
                    ChangeTracker.OriginalValues.Remove("Manager");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Manager", previousValue);
                }
                if (Manager != null && !Manager.ChangeTracker.ChangeTrackingEnabled)
                {
                    Manager.StartTracking();
                }
            }
        }

        #endregion
    }
}
