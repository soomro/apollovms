//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace VMSCORE.EntityClasses
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Volunteer))]
    [KnownType(typeof(Incident))]
    public partial class ProgressReport: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string ReportText
        {
            get { return _reportText; }
            set
            {
                if (_reportText != value)
                {
                    _reportText = value;
                    OnPropertyChanged("ReportText");
                }
            }
        }
        private string _reportText;
    
        [DataMember]
        public string ImageFile
        {
            get { return _imageFile; }
            set
            {
                if (_imageFile != value)
                {
                    _imageFile = value;
                    OnPropertyChanged("ImageFile");
                }
            }
        }
        private string _imageFile;
    
        [DataMember]
        public string VideoFile
        {
            get { return _videoFile; }
            set
            {
                if (_videoFile != value)
                {
                    _videoFile = value;
                    OnPropertyChanged("VideoFile");
                }
            }
        }
        private string _videoFile;
    
        [DataMember]
        private short StatusVal
        {
            get { return _statusVal; }
            set
            {
                if (_statusVal != value)
                {
                    _statusVal = value;
                    OnPropertyChanged("StatusVal");
                }
            }
        }
        private short _statusVal;
        public EnumIncidentStatus IncidentStatus
        {
            get
            {
                return Util.ReflectionUtil.SafeConvertToEnum<EnumIncidentStatus>(StatusVal, EnumIncidentStatus.Created);
            }
            set
            {
                StatusVal = (Int16)value;
            }
        }
    
        [DataMember]
        public int VolunteerId
        {
            get { return _volunteerId; }
            set
            {
                if (_volunteerId != value)
                {
                    ChangeTracker.RecordOriginalValue("VolunteerId", _volunteerId);
                    if (!IsDeserializing)
                    {
                        if (Volunteer != null && Volunteer.Id != value)
                        {
                            Volunteer = null;
                        }
                    }
                    _volunteerId = value;
                    OnPropertyChanged("VolunteerId");
                }
            }
        }
        private int _volunteerId;
    
        [DataMember]
        public int IncidentId
        {
            get { return _incidentId; }
            set
            {
                if (_incidentId != value)
                {
                    ChangeTracker.RecordOriginalValue("IncidentId", _incidentId);
                    if (!IsDeserializing)
                    {
                        if (Incident != null && Incident.Id != value)
                        {
                            Incident = null;
                        }
                    }
                    _incidentId = value;
                    OnPropertyChanged("IncidentId");
                }
            }
        }
        private int _incidentId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Volunteer Volunteer
        {
            get { return _volunteer; }
            set
            {
                if (!ReferenceEquals(_volunteer, value))
                {
                    var previousValue = _volunteer;
                    _volunteer = value;
                    FixupVolunteer(previousValue);
                    OnNavigationPropertyChanged("Volunteer");
                }
            }
        }
        private Volunteer _volunteer;
    
        [DataMember]
        public Incident Incident
        {
            get { return _incident; }
            set
            {
                if (!ReferenceEquals(_incident, value))
                {
                    var previousValue = _incident;
                    _incident = value;
                    FixupIncident(previousValue);
                    OnNavigationPropertyChanged("Incident");
                }
            }
        }
        private Incident _incident;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Volunteer = null;
            Incident = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupVolunteer(Volunteer previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProgressReports.Contains(this))
            {
                previousValue.ProgressReports.Remove(this);
            }
    
            if (Volunteer != null)
            {
                if (!Volunteer.ProgressReports.Contains(this))
                {
                    Volunteer.ProgressReports.Add(this);
                }
    
                VolunteerId = Volunteer.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Volunteer")
                    && (ChangeTracker.OriginalValues["Volunteer"] == Volunteer))
                {
                    ChangeTracker.OriginalValues.Remove("Volunteer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Volunteer", previousValue);
                }
                if (Volunteer != null && !Volunteer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Volunteer.StartTracking();
                }
            }
        }
    
        private void FixupIncident(Incident previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProgressReports.Contains(this))
            {
                previousValue.ProgressReports.Remove(this);
            }
    
            if (Incident != null)
            {
                if (!Incident.ProgressReports.Contains(this))
                {
                    Incident.ProgressReports.Add(this);
                }
    
                IncidentId = Incident.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Incident")
                    && (ChangeTracker.OriginalValues["Incident"] == Incident))
                {
                    ChangeTracker.OriginalValues.Remove("Incident");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Incident", previousValue);
                }
                if (Incident != null && !Incident.ChangeTracker.ChangeTrackingEnabled)
                {
                    Incident.StartTracking();
                }
            }
        }

        #endregion
    }
}
