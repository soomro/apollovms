//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace VMSCORE.EntityClasses
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(RequestResponse))]
    [KnownType(typeof(Request))]
    [KnownType(typeof(Incident))]
    public partial class NeedItem: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string ItemType
        {
            get { return _itemType; }
            set
            {
                if (_itemType != value)
                {
                    _itemType = value;
                    OnPropertyChanged("ItemType");
                }
            }
        }
        private string _itemType;
    
        [DataMember]
        public double ItemAmount
        {
            get { return _itemAmount; }
            set
            {
                if (_itemAmount != value)
                {
                    _itemAmount = value;
                    OnPropertyChanged("ItemAmount");
                }
            }
        }
        private double _itemAmount;
    
        [DataMember]
        private short MetricTypeVal
        {
            get { return _metricTypeVal; }
            set
            {
                if (_metricTypeVal != value)
                {
                    _metricTypeVal = value;
                    OnPropertyChanged("MetricTypeVal");
                }
            }
        }
        private short _metricTypeVal;
        public EnumMetricType MetricType
        {
            get
            {
                return Util.ReflectionUtil.SafeConvertToEnum<EnumMetricType>(MetricTypeVal, EnumMetricType.Box);
            }
            set
            {
                MetricTypeVal = (Int16)value;
            }
        }

        [DataMember]
        public double SuppliedAmount
        {
            get { return _suppliedAmount; }
            set
            {
                if (_suppliedAmount != value)
                {
                    _suppliedAmount = value;
                    OnPropertyChanged("SuppliedAmount");
                }
            }
        }
        private double _suppliedAmount;
    
        [DataMember]
        public Nullable<int> RequestResponseId
        {
            get { return _requestResponseId; }
            set
            {
                if (_requestResponseId != value)
                {
                    ChangeTracker.RecordOriginalValue("RequestResponseId", _requestResponseId);
                    if (!IsDeserializing)
                    {
                        if (RequestResponse != null && RequestResponse.Id != value)
                        {
                            RequestResponse = null;
                        }
                    }
                    _requestResponseId = value;
                    OnPropertyChanged("RequestResponseId");
                }
            }
        }
        private Nullable<int> _requestResponseId;
    
        [DataMember]
        public Nullable<int> RequestId
        {
            get { return _requestId; }
            set
            {
                if (_requestId != value)
                {
                    ChangeTracker.RecordOriginalValue("RequestId", _requestId);
                    if (!IsDeserializing)
                    {
                        if (Request != null && Request.Id != value)
                        {
                            Request = null;
                        }
                    }
                    _requestId = value;
                    OnPropertyChanged("RequestId");
                }
            }
        }
        private Nullable<int> _requestId;
    
        [DataMember]
        public Nullable<int> IncidentId
        {
            get { return _incidentId; }
            set
            {
                if (_incidentId != value)
                {
                    ChangeTracker.RecordOriginalValue("IncidentId", _incidentId);
                    if (!IsDeserializing)
                    {
                        if (Incident != null && Incident.Id != value)
                        {
                            Incident = null;
                        }
                    }
                    _incidentId = value;
                    OnPropertyChanged("IncidentId");
                }
            }
        }
        private Nullable<int> _incidentId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public RequestResponse RequestResponse
        {
            get { return _requestResponse; }
            set
            {
                if (!ReferenceEquals(_requestResponse, value))
                {
                    var previousValue = _requestResponse;
                    _requestResponse = value;
                    FixupRequestResponse(previousValue);
                    OnNavigationPropertyChanged("RequestResponse");
                }
            }
        }
        private RequestResponse _requestResponse;
    
        [DataMember]
        public Request Request
        {
            get { return _request; }
            set
            {
                if (!ReferenceEquals(_request, value))
                {
                    var previousValue = _request;
                    _request = value;
                    FixupRequest(previousValue);
                    OnNavigationPropertyChanged("Request");
                }
            }
        }
        private Request _request;
    
        [DataMember]
        public Incident Incident
        {
            get { return _incident; }
            set
            {
                if (!ReferenceEquals(_incident, value))
                {
                    var previousValue = _incident;
                    _incident = value;
                    FixupIncident(previousValue);
                    OnNavigationPropertyChanged("Incident");
                }
            }
        }
        private Incident _incident;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            RequestResponse = null;
            Request = null;
            Incident = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupRequestResponse(RequestResponse previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NeedItems.Contains(this))
            {
                previousValue.NeedItems.Remove(this);
            }
    
            if (RequestResponse != null)
            {
                if (!RequestResponse.NeedItems.Contains(this))
                {
                    RequestResponse.NeedItems.Add(this);
                }
    
                RequestResponseId = RequestResponse.Id;
            }
            else if (!skipKeys)
            {
                RequestResponseId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("RequestResponse")
                    && (ChangeTracker.OriginalValues["RequestResponse"] == RequestResponse))
                {
                    ChangeTracker.OriginalValues.Remove("RequestResponse");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("RequestResponse", previousValue);
                }
                if (RequestResponse != null && !RequestResponse.ChangeTracker.ChangeTrackingEnabled)
                {
                    RequestResponse.StartTracking();
                }
            }
        }
    
        private void FixupRequest(Request previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NeedItems.Contains(this))
            {
                previousValue.NeedItems.Remove(this);
            }
    
            if (Request != null)
            {
                if (!Request.NeedItems.Contains(this))
                {
                    Request.NeedItems.Add(this);
                }
    
                RequestId = Request.Id;
            }
            else if (!skipKeys)
            {
                RequestId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Request")
                    && (ChangeTracker.OriginalValues["Request"] == Request))
                {
                    ChangeTracker.OriginalValues.Remove("Request");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Request", previousValue);
                }
                if (Request != null && !Request.ChangeTracker.ChangeTrackingEnabled)
                {
                    Request.StartTracking();
                }
            }
        }
    
        private void FixupIncident(Incident previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NeedItems.Contains(this))
            {
                previousValue.NeedItems.Remove(this);
            }
    
            if (Incident != null)
            {
                if (!Incident.NeedItems.Contains(this))
                {
                    Incident.NeedItems.Add(this);
                }
    
                IncidentId = Incident.Id;
            }
            else if (!skipKeys)
            {
                IncidentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Incident")
                    && (ChangeTracker.OriginalValues["Incident"] == Incident))
                {
                    ChangeTracker.OriginalValues.Remove("Incident");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Incident", previousValue);
                }
                if (Incident != null && !Incident.ChangeTracker.ChangeTrackingEnabled)
                {
                    Incident.StartTracking();
                }
            }
        }

        #endregion
    }
}
