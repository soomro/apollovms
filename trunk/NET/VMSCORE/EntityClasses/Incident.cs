//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace VMSCORE.EntityClasses
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Crisis))]
    [KnownType(typeof(ProgressReport))]
    [KnownType(typeof(Request))]
    [KnownType(typeof(Alert))]
    [KnownType(typeof(NeedItem))]
    public partial class Incident: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string ShortDescription
        {
            get { return _shortDescription; }
            set
            {
                if (_shortDescription != value)
                {
                    _shortDescription = value;
                    OnPropertyChanged("ShortDescription");
                }
            }
        }
        private string _shortDescription;
    
        [DataMember]
        private short LocationTypeVal
        {
            get { return _locationTypeVal; }
            set
            {
                if (_locationTypeVal != value)
                {
                    _locationTypeVal = value;
                    OnPropertyChanged("LocationTypeVal");
                }
            }
        }
        private short _locationTypeVal;
        public EnumLocationType LocationType
        {
            get {
                return Util.ReflectionUtil.SafeConvertToEnum<EnumLocationType>(LocationTypeVal, EnumLocationType.Circle);
            }
            set {
                LocationTypeVal = (Int16)value;
            }
        }

        [DataMember]
        public string LocationCoordinatesStr
        {
            get { return _locationCoordinatesStr; }
            set
            {
                if (_locationCoordinatesStr != value)
                {
                    _locationCoordinatesStr = value;
                    OnPropertyChanged("LocationCoordinatesStr");
                }
            }
        }
        private string _locationCoordinatesStr;
    
        [DataMember]
        public string Explanation
        {
            get { return _explanation; }
            set
            {
                if (_explanation != value)
                {
                    _explanation = value;
                    OnPropertyChanged("Explanation");
                }
            }
        }
        private string _explanation;
    
        [DataMember]
        public System.DateTime DateCreated
        {
            get { return _dateCreated; }
            set
            {
                if (_dateCreated != value)
                {
                    _dateCreated = value;
                    OnPropertyChanged("DateCreated");
                }
            }
        }
        private System.DateTime _dateCreated;
    
        [DataMember]
        public Nullable<System.DateTime> DateClosed
        {
            get { return _dateClosed; }
            set
            {
                if (_dateClosed != value)
                {
                    _dateClosed = value;
                    OnPropertyChanged("DateClosed");
                }
            }
        }
        private Nullable<System.DateTime> _dateClosed;
    
        [DataMember]
        private short SeverityVal
        {
            get { return _severityVal; }
            set
            {
                if (_severityVal != value)
                {
                    _severityVal = value;
                    OnPropertyChanged("SeverityVal");
                }
            }
        }
        private short _severityVal;
        public EnumSeverity Severity
        {
            get
            {
                return Util.ReflectionUtil.SafeConvertToEnum<EnumSeverity>(SeverityVal, EnumSeverity.Medium);
            }
            set
            {
                SeverityVal = (Int16)value;
            }
        }

        [DataMember]
        private short IncidentTypeVal
        {
            get { return _incidentTypeVal; }
            set
            {
                if (_incidentTypeVal != value)
                {
                    _incidentTypeVal = value;
                    OnPropertyChanged("IncidentTypeVal");
                }
            }
        }
        private short _incidentTypeVal;
        public EnumIncidentType IncidentType
        {
            get
            {
                return Util.ReflectionUtil.SafeConvertToEnum<EnumIncidentType>(IncidentTypeVal, EnumIncidentType.Accident);
            }
            set
            {
                IncidentTypeVal = (Int16)value;
            }
        }

        [DataMember]
        private short IncidentStatusVal
        {
            get { return _incidentStatusVal; }
            set
            {
                if (_incidentStatusVal != value)
                {
                    _incidentStatusVal = value;
                    OnPropertyChanged("IncidentStatusVal");
                }
            }
        }
        private short _incidentStatusVal;
        public EnumIncidentStatus IncidentStatus
        {
            get
            {
                return Util.ReflectionUtil.SafeConvertToEnum<EnumIncidentStatus>(IncidentStatusVal, EnumIncidentStatus.Created);
            }
            set
            {
                IncidentStatusVal = (Int16)value;
            }
        }

        [DataMember]
        public string ShortAddress
        {
            get { return _shortAddress; }
            set
            {
                if (_shortAddress != value)
                {
                    _shortAddress = value;
                    OnPropertyChanged("ShortAddress");
                }
            }
        }
        private string _shortAddress;
    
        [DataMember]
        public int CrisisId
        {
            get { return _crisisId; }
            set
            {
                if (_crisisId != value)
                {
                    ChangeTracker.RecordOriginalValue("CrisisId", _crisisId);
                    if (!IsDeserializing)
                    {
                        if (Crisis != null && Crisis.Id != value)
                        {
                            Crisis = null;
                        }
                    }
                    _crisisId = value;
                    OnPropertyChanged("CrisisId");
                }
            }
        }
        private int _crisisId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Crisis Crisis
        {
            get { return _crisis; }
            set
            {
                if (!ReferenceEquals(_crisis, value))
                {
                    var previousValue = _crisis;
                    _crisis = value;
                    FixupCrisis(previousValue);
                    OnNavigationPropertyChanged("Crisis");
                }
            }
        }
        private Crisis _crisis;
    
        [DataMember]
        public TrackableCollection<ProgressReport> ProgressReports
        {
            get
            {
                if (_progressReports == null)
                {
                    _progressReports = new TrackableCollection<ProgressReport>();
                    _progressReports.CollectionChanged += FixupProgressReports;
                }
                return _progressReports;
            }
            set
            {
                if (!ReferenceEquals(_progressReports, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_progressReports != null)
                    {
                        _progressReports.CollectionChanged -= FixupProgressReports;
                    }
                    _progressReports = value;
                    if (_progressReports != null)
                    {
                        _progressReports.CollectionChanged += FixupProgressReports;
                    }
                    OnNavigationPropertyChanged("ProgressReports");
                }
            }
        }
        private TrackableCollection<ProgressReport> _progressReports;
    
        [DataMember]
        public TrackableCollection<Request> Requests
        {
            get
            {
                if (_requests == null)
                {
                    _requests = new TrackableCollection<Request>();
                    _requests.CollectionChanged += FixupRequests;
                }
                return _requests;
            }
            set
            {
                if (!ReferenceEquals(_requests, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requests != null)
                    {
                        _requests.CollectionChanged -= FixupRequests;
                    }
                    _requests = value;
                    if (_requests != null)
                    {
                        _requests.CollectionChanged += FixupRequests;
                    }
                    OnNavigationPropertyChanged("Requests");
                }
            }
        }
        private TrackableCollection<Request> _requests;
    
        [DataMember]
        public TrackableCollection<Alert> Alerts
        {
            get
            {
                if (_alerts == null)
                {
                    _alerts = new TrackableCollection<Alert>();
                    _alerts.CollectionChanged += FixupAlerts;
                }
                return _alerts;
            }
            set
            {
                if (!ReferenceEquals(_alerts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_alerts != null)
                    {
                        _alerts.CollectionChanged -= FixupAlerts;
                    }
                    _alerts = value;
                    if (_alerts != null)
                    {
                        _alerts.CollectionChanged += FixupAlerts;
                    }
                    OnNavigationPropertyChanged("Alerts");
                }
            }
        }
        private TrackableCollection<Alert> _alerts;
    
        [DataMember]
        public TrackableCollection<NeedItem> NeedItems
        {
            get
            {
                if (_needItems == null)
                {
                    _needItems = new TrackableCollection<NeedItem>();
                    _needItems.CollectionChanged += FixupNeedItems;
                }
                return _needItems;
            }
            set
            {
                if (!ReferenceEquals(_needItems, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_needItems != null)
                    {
                        _needItems.CollectionChanged -= FixupNeedItems;
                    }
                    _needItems = value;
                    if (_needItems != null)
                    {
                        _needItems.CollectionChanged += FixupNeedItems;
                    }
                    OnNavigationPropertyChanged("NeedItems");
                }
            }
        }
        private TrackableCollection<NeedItem> _needItems;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Crisis = null;
            ProgressReports.Clear();
            Requests.Clear();
            Alerts.Clear();
            NeedItems.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupCrisis(Crisis previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Incidents.Contains(this))
            {
                previousValue.Incidents.Remove(this);
            }
    
            if (Crisis != null)
            {
                if (!Crisis.Incidents.Contains(this))
                {
                    Crisis.Incidents.Add(this);
                }
    
                CrisisId = Crisis.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Crisis")
                    && (ChangeTracker.OriginalValues["Crisis"] == Crisis))
                {
                    ChangeTracker.OriginalValues.Remove("Crisis");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Crisis", previousValue);
                }
                if (Crisis != null && !Crisis.ChangeTracker.ChangeTrackingEnabled)
                {
                    Crisis.StartTracking();
                }
            }
        }
    
        private void FixupProgressReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProgressReport item in e.NewItems)
                {
                    item.Incident = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProgressReports", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProgressReport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident, this))
                    {
                        item.Incident = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProgressReports", item);
                    }
                }
            }
        }
    
        private void FixupRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Request item in e.NewItems)
                {
                    item.Incident = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Requests", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Request item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident, this))
                    {
                        item.Incident = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Requests", item);
                    }
                }
            }
        }
    
        private void FixupAlerts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Alert item in e.NewItems)
                {
                    item.Incident = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Alerts", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Alert item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident, this))
                    {
                        item.Incident = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Alerts", item);
                    }
                }
            }
        }
    
        private void FixupNeedItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NeedItem item in e.NewItems)
                {
                    item.Incident = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NeedItems", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NeedItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.Incident, this))
                    {
                        item.Incident = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NeedItems", item);
                    }
                }
            }
        }

        #endregion
    }
}
