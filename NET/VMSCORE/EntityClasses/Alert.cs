//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using VMSCORE.Util;

namespace VMSCORE.EntityClasses
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Crisis))]
    [KnownType(typeof(Incident))]
    public partial class Alert: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    OnPropertyChanged("Message");
                }
            }
        }
        private string _message;
    
        [DataMember]
        private string SearchCriteriaStr
        {
            get { return _searchCriteriaStr; }
            set
            {
                if (_searchCriteriaStr != value)
                {
                    _searchCriteriaStr = value;
                    OnPropertyChanged("SearchCriteriaStr");
                }
            }
        }
        private string _searchCriteriaStr;
        public IList<string> SearchCriteria
        {
            get
            {
                return new ObservableStringList(SearchCriteriaStr, "SearchCriteriaStr", this);
            }
        }

        [DataMember]
        public Nullable<System.DateTime> DateSent
        {
            get { return _dateSent; }
            set
            {
                if (_dateSent != value)
                {
                    _dateSent = value;
                    OnPropertyChanged("DateSent");
                }
            }
        }
        private Nullable<System.DateTime> _dateSent;
    
        [DataMember]
        public Nullable<int> IncidentId
        {
            get { return _incidentId; }
            set
            {
                if (_incidentId != value)
                {
                    ChangeTracker.RecordOriginalValue("IncidentId", _incidentId);
                    if (!IsDeserializing)
                    {
                        if (Incident != null && Incident.Id != value)
                        {
                            Incident = null;
                        }
                    }
                    _incidentId = value;
                    OnPropertyChanged("IncidentId");
                }
            }
        }
        private Nullable<int> _incidentId;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Crisis Crisis
        {
            get { return _crisis; }
            set
            {
                if (!ReferenceEquals(_crisis, value))
                {
                    var previousValue = _crisis;
                    _crisis = value;
                    FixupCrisis(previousValue);
                    OnNavigationPropertyChanged("Crisis");
                }
            }
        }
        private Crisis _crisis;
    
        [DataMember]
        public Incident Incident
        {
            get { return _incident; }
            set
            {
                if (!ReferenceEquals(_incident, value))
                {
                    var previousValue = _incident;
                    _incident = value;
                    FixupIncident(previousValue);
                    OnNavigationPropertyChanged("Incident");
                }
            }
        }
        private Incident _incident;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Crisis = null;
            FixupCrisisKeys();
            Incident = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCrisis(Crisis previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Alerts.Contains(this))
            {
                previousValue.Alerts.Remove(this);
            }
    
            if (Crisis != null)
            {
                if (!Crisis.Alerts.Contains(this))
                {
                    Crisis.Alerts.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Crisis")
                    && (ChangeTracker.OriginalValues["Crisis"] == Crisis))
                {
                    ChangeTracker.OriginalValues.Remove("Crisis");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Crisis", previousValue);
                }
                if (Crisis != null && !Crisis.ChangeTracker.ChangeTrackingEnabled)
                {
                    Crisis.StartTracking();
                }
                FixupCrisisKeys();
            }
        }
    
        private void FixupCrisisKeys()
        {
            const string IdKeyName = "Crisis.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Crisis == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Crisis.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupIncident(Incident previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Alerts.Contains(this))
            {
                previousValue.Alerts.Remove(this);
            }
    
            if (Incident != null)
            {
                if (!Incident.Alerts.Contains(this))
                {
                    Incident.Alerts.Add(this);
                }
    
                IncidentId = Incident.Id;
            }
            else if (!skipKeys)
            {
                IncidentId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Incident")
                    && (ChangeTracker.OriginalValues["Incident"] == Incident))
                {
                    ChangeTracker.OriginalValues.Remove("Incident");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Incident", previousValue);
                }
                if (Incident != null && !Incident.ChangeTracker.ChangeTrackingEnabled)
                {
                    Incident.StartTracking();
                }
            }
        }

        #endregion
    }
}
