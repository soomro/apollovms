//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace VMSCORE.EntityClasses
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(NeedItem))]
    [KnownType(typeof(Request))]
    [KnownType(typeof(Volunteer))]
    public partial class RequestResponse: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<System.DateTime> DateShowed
        {
            get { return _dateShowed; }
            set
            {
                if (_dateShowed != value)
                {
                    _dateShowed = value;
                    OnPropertyChanged("DateShowed");
                }
            }
        }
        private Nullable<System.DateTime> _dateShowed;
    
        [DataMember]
        public Nullable<System.DateTime> DateResponded
        {
            get { return _dateResponded; }
            set
            {
                if (_dateResponded != value)
                {
                    _dateResponded = value;
                    OnPropertyChanged("DateResponded");
                }
            }
        }
        private Nullable<System.DateTime> _dateResponded;
    
        [DataMember]
        public byte[] Answer
        {
            get { return _answer; }
            set
            {
                if (_answer != value)
                {
                    _answer = value;
                    OnPropertyChanged("Answer");
                }
            }
        }
        private byte[] _answer;
    
        [DataMember]
        private short StatusVal
        {
            get { return _statusVal; }
            set
            {
                if (_statusVal != value)
                {
                    _statusVal = value;
                    OnPropertyChanged("StatusVal");
                }
            }
        }
        private short _statusVal;
        public EnumRequestResponseStatus IncidentStatus
        {
            get
            {
                return Util.ReflectionUtil.SafeConvertToEnum<EnumRequestResponseStatus>(StatusVal, EnumRequestResponseStatus.Waiting);
            }
            set
            {
                StatusVal = (Int16)value;
            }
        }

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<NeedItem> NeedItems
        {
            get
            {
                if (_needItems == null)
                {
                    _needItems = new TrackableCollection<NeedItem>();
                    _needItems.CollectionChanged += FixupNeedItems;
                }
                return _needItems;
            }
            set
            {
                if (!ReferenceEquals(_needItems, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_needItems != null)
                    {
                        _needItems.CollectionChanged -= FixupNeedItems;
                    }
                    _needItems = value;
                    if (_needItems != null)
                    {
                        _needItems.CollectionChanged += FixupNeedItems;
                    }
                    OnNavigationPropertyChanged("NeedItems");
                }
            }
        }
        private TrackableCollection<NeedItem> _needItems;
    
        [DataMember]
        public Request Request
        {
            get { return _request; }
            set
            {
                if (!ReferenceEquals(_request, value))
                {
                    var previousValue = _request;
                    _request = value;
                    FixupRequest(previousValue);
                    OnNavigationPropertyChanged("Request");
                }
            }
        }
        private Request _request;
    
        [DataMember]
        public Volunteer Volunteer
        {
            get { return _volunteer; }
            set
            {
                if (!ReferenceEquals(_volunteer, value))
                {
                    var previousValue = _volunteer;
                    _volunteer = value;
                    FixupVolunteer(previousValue);
                    OnNavigationPropertyChanged("Volunteer");
                }
            }
        }
        private Volunteer _volunteer;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            NeedItems.Clear();
            Request = null;
            FixupRequestKeys();
            Volunteer = null;
            FixupVolunteerKeys();
        }

        #endregion
        #region Association Fixup
    
        private void FixupRequest(Request previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RequestResponses.Contains(this))
            {
                previousValue.RequestResponses.Remove(this);
            }
    
            if (Request != null)
            {
                if (!Request.RequestResponses.Contains(this))
                {
                    Request.RequestResponses.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Request")
                    && (ChangeTracker.OriginalValues["Request"] == Request))
                {
                    ChangeTracker.OriginalValues.Remove("Request");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Request", previousValue);
                }
                if (Request != null && !Request.ChangeTracker.ChangeTrackingEnabled)
                {
                    Request.StartTracking();
                }
                FixupRequestKeys();
            }
        }
    
        private void FixupRequestKeys()
        {
            const string IdKeyName = "Request.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Request == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Request.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupVolunteer(Volunteer previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.RequestResponses.Contains(this))
            {
                previousValue.RequestResponses.Remove(this);
            }
    
            if (Volunteer != null)
            {
                if (!Volunteer.RequestResponses.Contains(this))
                {
                    Volunteer.RequestResponses.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Volunteer")
                    && (ChangeTracker.OriginalValues["Volunteer"] == Volunteer))
                {
                    ChangeTracker.OriginalValues.Remove("Volunteer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Volunteer", previousValue);
                }
                if (Volunteer != null && !Volunteer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Volunteer.StartTracking();
                }
                FixupVolunteerKeys();
            }
        }
    
        private void FixupVolunteerKeys()
        {
            const string IdKeyName = "Volunteer.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Volunteer == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Volunteer.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupNeedItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NeedItem item in e.NewItems)
                {
                    item.RequestResponse = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NeedItems", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NeedItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.RequestResponse, this))
                    {
                        item.RequestResponse = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NeedItems", item);
                    }
                }
            }
        }

        #endregion
    }
}
